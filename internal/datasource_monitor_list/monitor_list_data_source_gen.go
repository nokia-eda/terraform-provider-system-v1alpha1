// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_monitor_list

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func MonitorListDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"fields": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
				MarkdownDescription: "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
			},
			"filter": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "an EQL \"where\" expression that will be used to filter the set of resources returned.",
				MarkdownDescription: "an EQL \"where\" expression that will be used to filter the set of resources returned.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"api_version": schema.StringAttribute{
							Computed: true,
						},
						"kind": schema.StringAttribute{
							Computed: true,
						},
						"metadata": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"annotations": schema.MapAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"labels": schema.MapAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"namespace": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: MetadataType{
								ObjectType: types.ObjectType{
									AttrTypes: MetadataValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"spec": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"cpu": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"enabled": schema.BoolAttribute{
											Optional:            true,
											Description:         "Enable or disable CPU monitoring.",
											MarkdownDescription: "Enable or disable CPU monitoring.",
										},
										"utilization": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"critical_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
												},
												"falling_delta": schema.Int64Attribute{
													Optional:            true,
													Description:         "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
													MarkdownDescription: "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
												},
												"major_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
												},
												"minor_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
												},
											},
											CustomType: UtilizationType{
												ObjectType: types.ObjectType{
													AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
												},
											},
											Optional:            true,
											Description:         "Parameters relating to CPU utilization monitoring.",
											MarkdownDescription: "Parameters relating to CPU utilization monitoring.",
										},
									},
									CustomType: CpuType{
										ObjectType: types.ObjectType{
											AttrTypes: CpuValue{}.AttributeTypes(ctx),
										},
									},
									Optional:            true,
									Description:         "CPU monitoring for targets matching this Monitor.",
									MarkdownDescription: "CPU monitoring for targets matching this Monitor.",
								},
								"disk": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"enabled": schema.BoolAttribute{
											Optional:            true,
											Description:         "Enable or disable disk monitoring.",
											MarkdownDescription: "Enable or disable disk monitoring.",
										},
										"utilization_1": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"critical_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
												},
												"falling_delta": schema.Int64Attribute{
													Optional:            true,
													Description:         "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
													MarkdownDescription: "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
												},
												"major_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
												},
												"minor_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
												},
											},
											CustomType: Utilization1Type{
												ObjectType: types.ObjectType{
													AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
												},
											},
											Optional:            true,
											Description:         "Parameters relating to disk utilization monitoring.",
											MarkdownDescription: "Parameters relating to disk utilization monitoring.",
										},
									},
									CustomType: DiskType{
										ObjectType: types.ObjectType{
											AttrTypes: DiskValue{}.AttributeTypes(ctx),
										},
									},
									Optional:            true,
									Description:         "Disk monitoring for targets matching this Monitor.",
									MarkdownDescription: "Disk monitoring for targets matching this Monitor.",
								},
								"memory": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"enabled": schema.BoolAttribute{
											Optional:            true,
											Description:         "Enable or disable memory monitoring.",
											MarkdownDescription: "Enable or disable memory monitoring.",
										},
										"utilization_2": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"critical_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
												},
												"falling_delta": schema.Int64Attribute{
													Optional:            true,
													Description:         "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
													MarkdownDescription: "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
												},
												"major_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
												},
												"minor_threshold": schema.Int64Attribute{
													Optional:            true,
													Description:         "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
													MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
												},
											},
											CustomType: Utilization2Type{
												ObjectType: types.ObjectType{
													AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
												},
											},
											Optional:            true,
											Description:         "Parameters relating to memory utilization monitoring.",
											MarkdownDescription: "Parameters relating to memory utilization monitoring.",
										},
									},
									CustomType: MemoryType{
										ObjectType: types.ObjectType{
											AttrTypes: MemoryValue{}.AttributeTypes(ctx),
										},
									},
									Optional:            true,
									Description:         "Memory monitoring for targets matching this Monitor.",
									MarkdownDescription: "Memory monitoring for targets matching this Monitor.",
								},
								"node_selector": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Description:         "Selector to use when including TopoNodes to monitor.",
									MarkdownDescription: "Selector to use when including TopoNodes to monitor.",
								},
								"nodes": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Description:         "References to TopoNodes to monitor.",
									MarkdownDescription: "References to TopoNodes to monitor.",
								},
							},
							CustomType: SpecType{
								ObjectType: types.ObjectType{
									AttrTypes: SpecValue{}.AttributeTypes(ctx),
								},
							},
							Optional:            true,
							Description:         "MonitorSpec defines the desired state of Monitor",
							MarkdownDescription: "MonitorSpec defines the desired state of Monitor",
						},
						"status": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"nodes": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "TopoNodes being monitored.",
									MarkdownDescription: "TopoNodes being monitored.",
								},
							},
							CustomType: StatusType{
								ObjectType: types.ObjectType{
									AttrTypes: StatusValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "MonitorStatus defines the observed state of Monitor",
							MarkdownDescription: "MonitorStatus defines the observed state of Monitor",
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"labelselector": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "a label selector string to filter the results based on CR labels",
				MarkdownDescription: "a label selector string to filter the results based on CR labels",
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "the namespace scope in which to operate",
				MarkdownDescription: "the namespace scope in which to operate",
			},
		},
	}
}

type MonitorListModel struct {
	ApiVersion    types.String `tfsdk:"api_version"`
	Fields        types.String `tfsdk:"fields"`
	Filter        types.String `tfsdk:"filter"`
	Items         types.List   `tfsdk:"items"`
	Kind          types.String `tfsdk:"kind"`
	Labelselector types.String `tfsdk:"labelselector"`
	Namespace     types.String `tfsdk:"namespace"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiVersionAttribute, ok := attributes["api_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_version is missing from object`)

		return nil, diags
	}

	apiVersionVal, ok := apiVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_version expected to be basetypes.StringValue, was: %T`, apiVersionAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return nil, diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	specAttribute, ok := attributes["spec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spec is missing from object`)

		return nil, diags
	}

	specVal, ok := specAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spec expected to be basetypes.ObjectValue, was: %T`, specAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.ObjectValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		ApiVersion: apiVersionVal,
		Kind:       kindVal,
		Metadata:   metadataVal,
		Spec:       specVal,
		Status:     statusVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	apiVersionAttribute, ok := attributes["api_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_version is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	apiVersionVal, ok := apiVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_version expected to be basetypes.StringValue, was: %T`, apiVersionAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	specAttribute, ok := attributes["spec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spec is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	specVal, ok := specAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spec expected to be basetypes.ObjectValue, was: %T`, specAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.ObjectValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		ApiVersion: apiVersionVal,
		Kind:       kindVal,
		Metadata:   metadataVal,
		Spec:       specVal,
		Status:     statusVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	ApiVersion basetypes.StringValue `tfsdk:"api_version"`
	Kind       basetypes.StringValue `tfsdk:"kind"`
	Metadata   basetypes.ObjectValue `tfsdk:"metadata"`
	Spec       basetypes.ObjectValue `tfsdk:"spec"`
	Status     basetypes.ObjectValue `tfsdk:"status"`
	state      attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["api_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["metadata"] = basetypes.ObjectType{
		AttrTypes: MetadataValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["spec"] = basetypes.ObjectType{
		AttrTypes: SpecValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["status"] = basetypes.ObjectType{
		AttrTypes: StatusValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.ApiVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_version"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Metadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metadata"] = val

		val, err = v.Spec.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["spec"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var metadata basetypes.ObjectValue

	if v.Metadata.IsNull() {
		metadata = types.ObjectNull(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if v.Metadata.IsUnknown() {
		metadata = types.ObjectUnknown(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Metadata.IsNull() && !v.Metadata.IsUnknown() {
		metadata = types.ObjectValueMust(
			MetadataValue{}.AttributeTypes(ctx),
			v.Metadata.Attributes(),
		)
	}

	var spec basetypes.ObjectValue

	if v.Spec.IsNull() {
		spec = types.ObjectNull(
			SpecValue{}.AttributeTypes(ctx),
		)
	}

	if v.Spec.IsUnknown() {
		spec = types.ObjectUnknown(
			SpecValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Spec.IsNull() && !v.Spec.IsUnknown() {
		spec = types.ObjectValueMust(
			SpecValue{}.AttributeTypes(ctx),
			v.Spec.Attributes(),
		)
	}

	var status basetypes.ObjectValue

	if v.Status.IsNull() {
		status = types.ObjectNull(
			StatusValue{}.AttributeTypes(ctx),
		)
	}

	if v.Status.IsUnknown() {
		status = types.ObjectUnknown(
			StatusValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Status.IsNull() && !v.Status.IsUnknown() {
		status = types.ObjectValueMust(
			StatusValue{}.AttributeTypes(ctx),
			v.Status.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"api_version": basetypes.StringType{},
		"kind":        basetypes.StringType{},
		"metadata": basetypes.ObjectType{
			AttrTypes: MetadataValue{}.AttributeTypes(ctx),
		},
		"spec": basetypes.ObjectType{
			AttrTypes: SpecValue{}.AttributeTypes(ctx),
		},
		"status": basetypes.ObjectType{
			AttrTypes: StatusValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_version": v.ApiVersion,
			"kind":        v.Kind,
			"metadata":    metadata,
			"spec":        spec,
			"status":      status,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiVersion.Equal(other.ApiVersion) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Metadata.Equal(other.Metadata) {
		return false
	}

	if !v.Spec.Equal(other.Spec) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_version": basetypes.StringType{},
		"kind":        basetypes.StringType{},
		"metadata": basetypes.ObjectType{
			AttrTypes: MetadataValue{}.AttributeTypes(ctx),
		},
		"spec": basetypes.ObjectType{
			AttrTypes: SpecValue{}.AttributeTypes(ctx),
		},
		"status": basetypes.ObjectType{
			AttrTypes: StatusValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Namespace   basetypes.StringValue `tfsdk:"namespace"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
			"namespace":   v.Namespace,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return nil, diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.ObjectValue, was: %T`, cpuAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return nil, diags
	}

	diskVal, ok := diskAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be basetypes.ObjectValue, was: %T`, diskAttribute))
	}

	memoryAttribute, ok := attributes["memory"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory is missing from object`)

		return nil, diags
	}

	memoryVal, ok := memoryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory expected to be basetypes.ObjectValue, was: %T`, memoryAttribute))
	}

	nodeSelectorAttribute, ok := attributes["node_selector"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_selector is missing from object`)

		return nil, diags
	}

	nodeSelectorVal, ok := nodeSelectorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_selector expected to be basetypes.ListValue, was: %T`, nodeSelectorAttribute))
	}

	nodesAttribute, ok := attributes["nodes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodes is missing from object`)

		return nil, diags
	}

	nodesVal, ok := nodesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodes expected to be basetypes.ListValue, was: %T`, nodesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Cpu:          cpuVal,
		Disk:         diskVal,
		Memory:       memoryVal,
		NodeSelector: nodeSelectorVal,
		Nodes:        nodesVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.ObjectValue, was: %T`, cpuAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	diskVal, ok := diskAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be basetypes.ObjectValue, was: %T`, diskAttribute))
	}

	memoryAttribute, ok := attributes["memory"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	memoryVal, ok := memoryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory expected to be basetypes.ObjectValue, was: %T`, memoryAttribute))
	}

	nodeSelectorAttribute, ok := attributes["node_selector"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_selector is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	nodeSelectorVal, ok := nodeSelectorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_selector expected to be basetypes.ListValue, was: %T`, nodeSelectorAttribute))
	}

	nodesAttribute, ok := attributes["nodes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodes is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	nodesVal, ok := nodesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodes expected to be basetypes.ListValue, was: %T`, nodesAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Cpu:          cpuVal,
		Disk:         diskVal,
		Memory:       memoryVal,
		NodeSelector: nodeSelectorVal,
		Nodes:        nodesVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Cpu          basetypes.ObjectValue `tfsdk:"cpu"`
	Disk         basetypes.ObjectValue `tfsdk:"disk"`
	Memory       basetypes.ObjectValue `tfsdk:"memory"`
	NodeSelector basetypes.ListValue   `tfsdk:"node_selector"`
	Nodes        basetypes.ListValue   `tfsdk:"nodes"`
	state        attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["cpu"] = basetypes.ObjectType{
		AttrTypes: CpuValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["disk"] = basetypes.ObjectType{
		AttrTypes: DiskValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["memory"] = basetypes.ObjectType{
		AttrTypes: MemoryValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["node_selector"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["nodes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Cpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cpu"] = val

		val, err = v.Disk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disk"] = val

		val, err = v.Memory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["memory"] = val

		val, err = v.NodeSelector.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_selector"] = val

		val, err = v.Nodes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nodes"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpu basetypes.ObjectValue

	if v.Cpu.IsNull() {
		cpu = types.ObjectNull(
			CpuValue{}.AttributeTypes(ctx),
		)
	}

	if v.Cpu.IsUnknown() {
		cpu = types.ObjectUnknown(
			CpuValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Cpu.IsNull() && !v.Cpu.IsUnknown() {
		cpu = types.ObjectValueMust(
			CpuValue{}.AttributeTypes(ctx),
			v.Cpu.Attributes(),
		)
	}

	var disk basetypes.ObjectValue

	if v.Disk.IsNull() {
		disk = types.ObjectNull(
			DiskValue{}.AttributeTypes(ctx),
		)
	}

	if v.Disk.IsUnknown() {
		disk = types.ObjectUnknown(
			DiskValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Disk.IsNull() && !v.Disk.IsUnknown() {
		disk = types.ObjectValueMust(
			DiskValue{}.AttributeTypes(ctx),
			v.Disk.Attributes(),
		)
	}

	var memory basetypes.ObjectValue

	if v.Memory.IsNull() {
		memory = types.ObjectNull(
			MemoryValue{}.AttributeTypes(ctx),
		)
	}

	if v.Memory.IsUnknown() {
		memory = types.ObjectUnknown(
			MemoryValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Memory.IsNull() && !v.Memory.IsUnknown() {
		memory = types.ObjectValueMust(
			MemoryValue{}.AttributeTypes(ctx),
			v.Memory.Attributes(),
		)
	}

	var nodeSelectorVal basetypes.ListValue
	switch {
	case v.NodeSelector.IsUnknown():
		nodeSelectorVal = types.ListUnknown(types.StringType)
	case v.NodeSelector.IsNull():
		nodeSelectorVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		nodeSelectorVal, d = types.ListValue(types.StringType, v.NodeSelector.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cpu": basetypes.ObjectType{
				AttrTypes: CpuValue{}.AttributeTypes(ctx),
			},
			"disk": basetypes.ObjectType{
				AttrTypes: DiskValue{}.AttributeTypes(ctx),
			},
			"memory": basetypes.ObjectType{
				AttrTypes: MemoryValue{}.AttributeTypes(ctx),
			},
			"node_selector": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nodes": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var nodesVal basetypes.ListValue
	switch {
	case v.Nodes.IsUnknown():
		nodesVal = types.ListUnknown(types.StringType)
	case v.Nodes.IsNull():
		nodesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		nodesVal, d = types.ListValue(types.StringType, v.Nodes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cpu": basetypes.ObjectType{
				AttrTypes: CpuValue{}.AttributeTypes(ctx),
			},
			"disk": basetypes.ObjectType{
				AttrTypes: DiskValue{}.AttributeTypes(ctx),
			},
			"memory": basetypes.ObjectType{
				AttrTypes: MemoryValue{}.AttributeTypes(ctx),
			},
			"node_selector": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nodes": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"cpu": basetypes.ObjectType{
			AttrTypes: CpuValue{}.AttributeTypes(ctx),
		},
		"disk": basetypes.ObjectType{
			AttrTypes: DiskValue{}.AttributeTypes(ctx),
		},
		"memory": basetypes.ObjectType{
			AttrTypes: MemoryValue{}.AttributeTypes(ctx),
		},
		"node_selector": basetypes.ListType{
			ElemType: types.StringType,
		},
		"nodes": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cpu":           cpu,
			"disk":          disk,
			"memory":        memory,
			"node_selector": nodeSelectorVal,
			"nodes":         nodesVal,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Cpu.Equal(other.Cpu) {
		return false
	}

	if !v.Disk.Equal(other.Disk) {
		return false
	}

	if !v.Memory.Equal(other.Memory) {
		return false
	}

	if !v.NodeSelector.Equal(other.NodeSelector) {
		return false
	}

	if !v.Nodes.Equal(other.Nodes) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cpu": basetypes.ObjectType{
			AttrTypes: CpuValue{}.AttributeTypes(ctx),
		},
		"disk": basetypes.ObjectType{
			AttrTypes: DiskValue{}.AttributeTypes(ctx),
		},
		"memory": basetypes.ObjectType{
			AttrTypes: MemoryValue{}.AttributeTypes(ctx),
		},
		"node_selector": basetypes.ListType{
			ElemType: types.StringType,
		},
		"nodes": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = CpuType{}

type CpuType struct {
	basetypes.ObjectType
}

func (t CpuType) Equal(o attr.Type) bool {
	other, ok := o.(CpuType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CpuType) String() string {
	return "CpuType"
}

func (t CpuType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilizationAttribute, ok := attributes["utilization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization is missing from object`)

		return nil, diags
	}

	utilizationVal, ok := utilizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization expected to be basetypes.ObjectValue, was: %T`, utilizationAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CpuValue{
		Enabled:     enabledVal,
		Utilization: utilizationVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCpuValueNull() CpuValue {
	return CpuValue{
		state: attr.ValueStateNull,
	}
}

func NewCpuValueUnknown() CpuValue {
	return CpuValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCpuValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CpuValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CpuValue Attribute Value",
				"While creating a CpuValue value, a missing attribute value was detected. "+
					"A CpuValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CpuValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CpuValue Attribute Type",
				"While creating a CpuValue value, an invalid attribute value was detected. "+
					"A CpuValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CpuValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CpuValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CpuValue Attribute Value",
				"While creating a CpuValue value, an extra attribute value was detected. "+
					"A CpuValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CpuValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCpuValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewCpuValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilizationAttribute, ok := attributes["utilization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization is missing from object`)

		return NewCpuValueUnknown(), diags
	}

	utilizationVal, ok := utilizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization expected to be basetypes.ObjectValue, was: %T`, utilizationAttribute))
	}

	if diags.HasError() {
		return NewCpuValueUnknown(), diags
	}

	return CpuValue{
		Enabled:     enabledVal,
		Utilization: utilizationVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCpuValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CpuValue {
	object, diags := NewCpuValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCpuValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CpuType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCpuValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCpuValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCpuValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCpuValueMust(CpuValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CpuType) ValueType(ctx context.Context) attr.Value {
	return CpuValue{}
}

var _ basetypes.ObjectValuable = CpuValue{}

type CpuValue struct {
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Utilization basetypes.ObjectValue `tfsdk:"utilization"`
	state       attr.ValueState
}

func (v CpuValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["utilization"] = basetypes.ObjectType{
		AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Utilization.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["utilization"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CpuValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CpuValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CpuValue) String() string {
	return "CpuValue"
}

func (v CpuValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var utilization basetypes.ObjectValue

	if v.Utilization.IsNull() {
		utilization = types.ObjectNull(
			UtilizationValue{}.AttributeTypes(ctx),
		)
	}

	if v.Utilization.IsUnknown() {
		utilization = types.ObjectUnknown(
			UtilizationValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Utilization.IsNull() && !v.Utilization.IsUnknown() {
		utilization = types.ObjectValueMust(
			UtilizationValue{}.AttributeTypes(ctx),
			v.Utilization.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization": basetypes.ObjectType{
			AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":     v.Enabled,
			"utilization": utilization,
		})

	return objVal, diags
}

func (v CpuValue) Equal(o attr.Value) bool {
	other, ok := o.(CpuValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Utilization.Equal(other.Utilization) {
		return false
	}

	return true
}

func (v CpuValue) Type(ctx context.Context) attr.Type {
	return CpuType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CpuValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization": basetypes.ObjectType{
			AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = UtilizationType{}

type UtilizationType struct {
	basetypes.ObjectType
}

func (t UtilizationType) Equal(o attr.Type) bool {
	other, ok := o.(UtilizationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UtilizationType) String() string {
	return "UtilizationType"
}

func (t UtilizationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return nil, diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return nil, diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return nil, diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return nil, diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UtilizationValue{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilizationValueNull() UtilizationValue {
	return UtilizationValue{
		state: attr.ValueStateNull,
	}
}

func NewUtilizationValueUnknown() UtilizationValue {
	return UtilizationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUtilizationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UtilizationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UtilizationValue Attribute Value",
				"While creating a UtilizationValue value, a missing attribute value was detected. "+
					"A UtilizationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UtilizationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UtilizationValue Attribute Type",
				"While creating a UtilizationValue value, an invalid attribute value was detected. "+
					"A UtilizationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UtilizationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UtilizationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UtilizationValue Attribute Value",
				"While creating a UtilizationValue value, an extra attribute value was detected. "+
					"A UtilizationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UtilizationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUtilizationValueUnknown(), diags
	}

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return NewUtilizationValueUnknown(), diags
	}

	return UtilizationValue{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilizationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UtilizationValue {
	object, diags := NewUtilizationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUtilizationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UtilizationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUtilizationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUtilizationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUtilizationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUtilizationValueMust(UtilizationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UtilizationType) ValueType(ctx context.Context) attr.Value {
	return UtilizationValue{}
}

var _ basetypes.ObjectValuable = UtilizationValue{}

type UtilizationValue struct {
	CriticalThreshold basetypes.Int64Value `tfsdk:"critical_threshold"`
	FallingDelta      basetypes.Int64Value `tfsdk:"falling_delta"`
	MajorThreshold    basetypes.Int64Value `tfsdk:"major_threshold"`
	MinorThreshold    basetypes.Int64Value `tfsdk:"minor_threshold"`
	state             attr.ValueState
}

func (v UtilizationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["critical_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["falling_delta"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["major_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minor_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CriticalThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["critical_threshold"] = val

		val, err = v.FallingDelta.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["falling_delta"] = val

		val, err = v.MajorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major_threshold"] = val

		val, err = v.MinorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor_threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UtilizationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UtilizationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UtilizationValue) String() string {
	return "UtilizationValue"
}

func (v UtilizationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"critical_threshold": v.CriticalThreshold,
			"falling_delta":      v.FallingDelta,
			"major_threshold":    v.MajorThreshold,
			"minor_threshold":    v.MinorThreshold,
		})

	return objVal, diags
}

func (v UtilizationValue) Equal(o attr.Value) bool {
	other, ok := o.(UtilizationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CriticalThreshold.Equal(other.CriticalThreshold) {
		return false
	}

	if !v.FallingDelta.Equal(other.FallingDelta) {
		return false
	}

	if !v.MajorThreshold.Equal(other.MajorThreshold) {
		return false
	}

	if !v.MinorThreshold.Equal(other.MinorThreshold) {
		return false
	}

	return true
}

func (v UtilizationValue) Type(ctx context.Context) attr.Type {
	return UtilizationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UtilizationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = DiskType{}

type DiskType struct {
	basetypes.ObjectType
}

func (t DiskType) Equal(o attr.Type) bool {
	other, ok := o.(DiskType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DiskType) String() string {
	return "DiskType"
}

func (t DiskType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization1Attribute, ok := attributes["utilization_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_1 is missing from object`)

		return nil, diags
	}

	utilization1Val, ok := utilization1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_1 expected to be basetypes.ObjectValue, was: %T`, utilization1Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DiskValue{
		Enabled:      enabledVal,
		Utilization1: utilization1Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewDiskValueNull() DiskValue {
	return DiskValue{
		state: attr.ValueStateNull,
	}
}

func NewDiskValueUnknown() DiskValue {
	return DiskValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDiskValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DiskValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DiskValue Attribute Value",
				"While creating a DiskValue value, a missing attribute value was detected. "+
					"A DiskValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DiskValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DiskValue Attribute Type",
				"While creating a DiskValue value, an invalid attribute value was detected. "+
					"A DiskValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DiskValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DiskValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DiskValue Attribute Value",
				"While creating a DiskValue value, an extra attribute value was detected. "+
					"A DiskValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DiskValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDiskValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewDiskValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization1Attribute, ok := attributes["utilization_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_1 is missing from object`)

		return NewDiskValueUnknown(), diags
	}

	utilization1Val, ok := utilization1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_1 expected to be basetypes.ObjectValue, was: %T`, utilization1Attribute))
	}

	if diags.HasError() {
		return NewDiskValueUnknown(), diags
	}

	return DiskValue{
		Enabled:      enabledVal,
		Utilization1: utilization1Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewDiskValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DiskValue {
	object, diags := NewDiskValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDiskValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DiskType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDiskValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDiskValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDiskValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDiskValueMust(DiskValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DiskType) ValueType(ctx context.Context) attr.Value {
	return DiskValue{}
}

var _ basetypes.ObjectValuable = DiskValue{}

type DiskValue struct {
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	Utilization1 basetypes.ObjectValue `tfsdk:"utilization_1"`
	state        attr.ValueState
}

func (v DiskValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["utilization_1"] = basetypes.ObjectType{
		AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Utilization1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["utilization_1"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DiskValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DiskValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DiskValue) String() string {
	return "DiskValue"
}

func (v DiskValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var utilization1 basetypes.ObjectValue

	if v.Utilization1.IsNull() {
		utilization1 = types.ObjectNull(
			Utilization1Value{}.AttributeTypes(ctx),
		)
	}

	if v.Utilization1.IsUnknown() {
		utilization1 = types.ObjectUnknown(
			Utilization1Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Utilization1.IsNull() && !v.Utilization1.IsUnknown() {
		utilization1 = types.ObjectValueMust(
			Utilization1Value{}.AttributeTypes(ctx),
			v.Utilization1.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_1": basetypes.ObjectType{
			AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":       v.Enabled,
			"utilization_1": utilization1,
		})

	return objVal, diags
}

func (v DiskValue) Equal(o attr.Value) bool {
	other, ok := o.(DiskValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Utilization1.Equal(other.Utilization1) {
		return false
	}

	return true
}

func (v DiskValue) Type(ctx context.Context) attr.Type {
	return DiskType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DiskValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_1": basetypes.ObjectType{
			AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = Utilization1Type{}

type Utilization1Type struct {
	basetypes.ObjectType
}

func (t Utilization1Type) Equal(o attr.Type) bool {
	other, ok := o.(Utilization1Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Utilization1Type) String() string {
	return "Utilization1Type"
}

func (t Utilization1Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return nil, diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return nil, diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return nil, diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return nil, diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Utilization1Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization1ValueNull() Utilization1Value {
	return Utilization1Value{
		state: attr.ValueStateNull,
	}
}

func NewUtilization1ValueUnknown() Utilization1Value {
	return Utilization1Value{
		state: attr.ValueStateUnknown,
	}
}

func NewUtilization1Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Utilization1Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Utilization1Value Attribute Value",
				"While creating a Utilization1Value value, a missing attribute value was detected. "+
					"A Utilization1Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization1Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Utilization1Value Attribute Type",
				"While creating a Utilization1Value value, an invalid attribute value was detected. "+
					"A Utilization1Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization1Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Utilization1Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Utilization1Value Attribute Value",
				"While creating a Utilization1Value value, an extra attribute value was detected. "+
					"A Utilization1Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Utilization1Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUtilization1ValueUnknown(), diags
	}

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return NewUtilization1ValueUnknown(), diags
	}

	return Utilization1Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization1ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Utilization1Value {
	object, diags := NewUtilization1Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUtilization1ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Utilization1Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUtilization1ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUtilization1ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUtilization1ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUtilization1ValueMust(Utilization1Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Utilization1Type) ValueType(ctx context.Context) attr.Value {
	return Utilization1Value{}
}

var _ basetypes.ObjectValuable = Utilization1Value{}

type Utilization1Value struct {
	CriticalThreshold basetypes.Int64Value `tfsdk:"critical_threshold"`
	FallingDelta      basetypes.Int64Value `tfsdk:"falling_delta"`
	MajorThreshold    basetypes.Int64Value `tfsdk:"major_threshold"`
	MinorThreshold    basetypes.Int64Value `tfsdk:"minor_threshold"`
	state             attr.ValueState
}

func (v Utilization1Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["critical_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["falling_delta"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["major_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minor_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CriticalThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["critical_threshold"] = val

		val, err = v.FallingDelta.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["falling_delta"] = val

		val, err = v.MajorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major_threshold"] = val

		val, err = v.MinorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor_threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Utilization1Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Utilization1Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Utilization1Value) String() string {
	return "Utilization1Value"
}

func (v Utilization1Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"critical_threshold": v.CriticalThreshold,
			"falling_delta":      v.FallingDelta,
			"major_threshold":    v.MajorThreshold,
			"minor_threshold":    v.MinorThreshold,
		})

	return objVal, diags
}

func (v Utilization1Value) Equal(o attr.Value) bool {
	other, ok := o.(Utilization1Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CriticalThreshold.Equal(other.CriticalThreshold) {
		return false
	}

	if !v.FallingDelta.Equal(other.FallingDelta) {
		return false
	}

	if !v.MajorThreshold.Equal(other.MajorThreshold) {
		return false
	}

	if !v.MinorThreshold.Equal(other.MinorThreshold) {
		return false
	}

	return true
}

func (v Utilization1Value) Type(ctx context.Context) attr.Type {
	return Utilization1Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Utilization1Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = MemoryType{}

type MemoryType struct {
	basetypes.ObjectType
}

func (t MemoryType) Equal(o attr.Type) bool {
	other, ok := o.(MemoryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MemoryType) String() string {
	return "MemoryType"
}

func (t MemoryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization2Attribute, ok := attributes["utilization_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_2 is missing from object`)

		return nil, diags
	}

	utilization2Val, ok := utilization2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_2 expected to be basetypes.ObjectValue, was: %T`, utilization2Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MemoryValue{
		Enabled:      enabledVal,
		Utilization2: utilization2Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMemoryValueNull() MemoryValue {
	return MemoryValue{
		state: attr.ValueStateNull,
	}
}

func NewMemoryValueUnknown() MemoryValue {
	return MemoryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMemoryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MemoryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MemoryValue Attribute Value",
				"While creating a MemoryValue value, a missing attribute value was detected. "+
					"A MemoryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MemoryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MemoryValue Attribute Type",
				"While creating a MemoryValue value, an invalid attribute value was detected. "+
					"A MemoryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MemoryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MemoryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MemoryValue Attribute Value",
				"While creating a MemoryValue value, an extra attribute value was detected. "+
					"A MemoryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MemoryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMemoryValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewMemoryValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization2Attribute, ok := attributes["utilization_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_2 is missing from object`)

		return NewMemoryValueUnknown(), diags
	}

	utilization2Val, ok := utilization2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_2 expected to be basetypes.ObjectValue, was: %T`, utilization2Attribute))
	}

	if diags.HasError() {
		return NewMemoryValueUnknown(), diags
	}

	return MemoryValue{
		Enabled:      enabledVal,
		Utilization2: utilization2Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMemoryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MemoryValue {
	object, diags := NewMemoryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMemoryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MemoryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMemoryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMemoryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMemoryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMemoryValueMust(MemoryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MemoryType) ValueType(ctx context.Context) attr.Value {
	return MemoryValue{}
}

var _ basetypes.ObjectValuable = MemoryValue{}

type MemoryValue struct {
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	Utilization2 basetypes.ObjectValue `tfsdk:"utilization_2"`
	state        attr.ValueState
}

func (v MemoryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["utilization_2"] = basetypes.ObjectType{
		AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Utilization2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["utilization_2"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MemoryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MemoryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MemoryValue) String() string {
	return "MemoryValue"
}

func (v MemoryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var utilization2 basetypes.ObjectValue

	if v.Utilization2.IsNull() {
		utilization2 = types.ObjectNull(
			Utilization2Value{}.AttributeTypes(ctx),
		)
	}

	if v.Utilization2.IsUnknown() {
		utilization2 = types.ObjectUnknown(
			Utilization2Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Utilization2.IsNull() && !v.Utilization2.IsUnknown() {
		utilization2 = types.ObjectValueMust(
			Utilization2Value{}.AttributeTypes(ctx),
			v.Utilization2.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_2": basetypes.ObjectType{
			AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":       v.Enabled,
			"utilization_2": utilization2,
		})

	return objVal, diags
}

func (v MemoryValue) Equal(o attr.Value) bool {
	other, ok := o.(MemoryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Utilization2.Equal(other.Utilization2) {
		return false
	}

	return true
}

func (v MemoryValue) Type(ctx context.Context) attr.Type {
	return MemoryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MemoryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_2": basetypes.ObjectType{
			AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = Utilization2Type{}

type Utilization2Type struct {
	basetypes.ObjectType
}

func (t Utilization2Type) Equal(o attr.Type) bool {
	other, ok := o.(Utilization2Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Utilization2Type) String() string {
	return "Utilization2Type"
}

func (t Utilization2Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return nil, diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return nil, diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return nil, diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return nil, diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Utilization2Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization2ValueNull() Utilization2Value {
	return Utilization2Value{
		state: attr.ValueStateNull,
	}
}

func NewUtilization2ValueUnknown() Utilization2Value {
	return Utilization2Value{
		state: attr.ValueStateUnknown,
	}
}

func NewUtilization2Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Utilization2Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Utilization2Value Attribute Value",
				"While creating a Utilization2Value value, a missing attribute value was detected. "+
					"A Utilization2Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization2Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Utilization2Value Attribute Type",
				"While creating a Utilization2Value value, an invalid attribute value was detected. "+
					"A Utilization2Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization2Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Utilization2Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Utilization2Value Attribute Value",
				"While creating a Utilization2Value value, an extra attribute value was detected. "+
					"A Utilization2Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Utilization2Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUtilization2ValueUnknown(), diags
	}

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return NewUtilization2ValueUnknown(), diags
	}

	return Utilization2Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization2ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Utilization2Value {
	object, diags := NewUtilization2Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUtilization2ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Utilization2Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUtilization2ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUtilization2ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUtilization2ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUtilization2ValueMust(Utilization2Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Utilization2Type) ValueType(ctx context.Context) attr.Value {
	return Utilization2Value{}
}

var _ basetypes.ObjectValuable = Utilization2Value{}

type Utilization2Value struct {
	CriticalThreshold basetypes.Int64Value `tfsdk:"critical_threshold"`
	FallingDelta      basetypes.Int64Value `tfsdk:"falling_delta"`
	MajorThreshold    basetypes.Int64Value `tfsdk:"major_threshold"`
	MinorThreshold    basetypes.Int64Value `tfsdk:"minor_threshold"`
	state             attr.ValueState
}

func (v Utilization2Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["critical_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["falling_delta"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["major_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minor_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CriticalThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["critical_threshold"] = val

		val, err = v.FallingDelta.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["falling_delta"] = val

		val, err = v.MajorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major_threshold"] = val

		val, err = v.MinorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor_threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Utilization2Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Utilization2Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Utilization2Value) String() string {
	return "Utilization2Value"
}

func (v Utilization2Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"critical_threshold": v.CriticalThreshold,
			"falling_delta":      v.FallingDelta,
			"major_threshold":    v.MajorThreshold,
			"minor_threshold":    v.MinorThreshold,
		})

	return objVal, diags
}

func (v Utilization2Value) Equal(o attr.Value) bool {
	other, ok := o.(Utilization2Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CriticalThreshold.Equal(other.CriticalThreshold) {
		return false
	}

	if !v.FallingDelta.Equal(other.FallingDelta) {
		return false
	}

	if !v.MajorThreshold.Equal(other.MajorThreshold) {
		return false
	}

	if !v.MinorThreshold.Equal(other.MinorThreshold) {
		return false
	}

	return true
}

func (v Utilization2Value) Type(ctx context.Context) attr.Type {
	return Utilization2Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Utilization2Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nodesAttribute, ok := attributes["nodes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodes is missing from object`)

		return nil, diags
	}

	nodesVal, ok := nodesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodes expected to be basetypes.ListValue, was: %T`, nodesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		Nodes: nodesVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	nodesAttribute, ok := attributes["nodes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodes is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	nodesVal, ok := nodesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodes expected to be basetypes.ListValue, was: %T`, nodesAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		Nodes: nodesVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	Nodes basetypes.ListValue `tfsdk:"nodes"`
	state attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["nodes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Nodes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nodes"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var nodesVal basetypes.ListValue
	switch {
	case v.Nodes.IsUnknown():
		nodesVal = types.ListUnknown(types.StringType)
	case v.Nodes.IsNull():
		nodesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		nodesVal, d = types.ListValue(types.StringType, v.Nodes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"nodes": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"nodes": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"nodes": nodesVal,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Nodes.Equal(other.Nodes) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"nodes": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
